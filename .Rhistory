# V8 Gas
initialPrice <- 37965
mpg <- 15
fuelPrice <- 3.696
# will use 100,000 for the total miles
distance <- 100000
# put it all together
finalCost <- initialPrice + (distance/mpg)*fuelPrice
# write a function
calCost <- function(initialPrice, distance, mpg, fuelPrice){
cost <- initialPrice + (distance/mpg)*fuelPrice
return(cost)
}
# mileage range
mileRange <- seq(from = 25000, to = 200000, by = 25000)
# apply' function across
costs <- lapply(mileRange, calCost, initialPrice = initialPrice, mpg = mpg, fuelPrice = fuelPrice)
### because our function has multiple parameters we need to specific inputs within lapply. In this case we left the required input of 'distance' blank so lapply filled in that value with the values from the list.
engineType <- c("V6 gas", "V8 gas", "V4 diesel")
baseCostDollars<- c(35195, 37965,40265)
costPerGallonOfFuel <- c(3.696, 3.696, 3.411)
mpg <- c(17,15,30)
mileRange <- seq(from = 25000, to = 200000, by = 25000)
df <- data.frame(matrix(nrow = length(engineType), ncol = 4 + length(mileRange)))
colnames(df) <- c("Model", "Purchase Price","MPG", "Cost Per Gallon", paste0(as.character(mileRange), " miles"))
df$Model <- engineType
df$`Purchase Price` <- baseCostDollars
df$MPG <- mpg
df$`Cost Per Gallon` <- costPerGallonOfFuel
for(i in seq_along(engineType)){
# for each unique vechile
for(j in seq_along(mileRange)){
# for each step in the miles range
df[i, j+4]<- calCost(initialPrice = baseCostDollars[i], distance = mileRange[j], mpg = mpg[i], fuelPrice = costPerGallonOfFuel[i])
}
}
df
for(i in seq_along(engineType)){
# for each unique vechile
for(j in seq_along(mileRange)){
# for each step in the miles range
df[i, j+4]<- calCost(initialPrice = baseCostDollars[i], distance = mileRange[j], mpg = mpg[i], fuelPrice = costPerGallonOfFuel[i])
}
}
DT::datatable(df)
for(i in seq_along(engineType)){
# for each unique vechile
for(j in seq_along(mileRange)){
# for each step in the miles range
df[i, j+4]<- calCost(initialPrice = baseCostDollars[i], distance = mileRange[j], mpg = mpg[i], fuelPrice = costPerGallonOfFuel[i])
}
}
DT::datatable(df)
# write a function
calCost <- function(initialPrice, distance, mpg, fuelPrice){
cost <- initialPrice + (distance/mpg)*fuelPrice
cost <- round(cost, digits = 2)
return(cost)
}
for(i in seq_along(engineType)){
# for each unique vechile
for(j in seq_along(mileRange)){
# for each step in the miles range
df[i, j+4]<- calCost(initialPrice = baseCostDollars[i], distance = mileRange[j], mpg = mpg[i], fuelPrice = costPerGallonOfFuel[i])
}
}
DT::datatable(df)
# write a function
calCost <- function(initialPrice, distance, mpg, fuelPrice){
cost <- initialPrice + (distance/mpg)*fuelPrice
cost <- round(cost, digits = 0)
return(cost)
}
df$Model <- engineType
df$`Purchase Price` <- baseCostDollars
df$MPG <- mpg
df$`Cost Per Gallon` <- costPerGallonOfFuel
# mileage range
mileRange <- seq(from = 15000, to = 210000, by = 15000)
# apply' function across
costs <- lapply(mileRange, calCost, initialPrice = initialPrice, mpg = mpg, fuelPrice = fuelPrice)
### because our function has multiple parameters we need to specific inputs within lapply. In this case we left the required input of 'distance' blank so lapply filled in that value with the values from the list.
[1] 44125
print(costs)
engineType <- c("V6 gas", "V8 gas", "V4 diesel")
baseCostDollars<- c(35195, 37965,40265)
costPerGallonOfFuel <- c(3.696, 3.696, 3.411)
mpg <- c(17,15,30)
mileRange <- seq(from = 25000, to = 200000, by = 25000)
df <- data.frame(matrix(nrow = length(engineType), ncol = 4 + length(mileRange)))
colnames(df) <- c("Model", "Purchase Price","MPG", "Cost Per Gallon", paste0(as.character(mileRange), " miles"))
df$Model <- engineType
df$`Purchase Price` <- baseCostDollars
df$MPG <- mpg
df$`Cost Per Gallon` <- costPerGallonOfFuel
for(i in seq_along(engineType)){
# for each unique vechile
for(j in seq_along(mileRange)){
# for each step in the miles range
df[i, j+4]<- calCost(initialPrice = baseCostDollars[i], distance = mileRange[j], mpg = mpg[i], fuelPrice = costPerGallonOfFuel[i])
}
}
DT::datatable(df)
engineType <- c("V6 gas", "V8 gas", "V4 diesel")
baseCostDollars<- c(35195, 37965,40265)
costPerGallonOfFuel <- c(3.696, 3.696, 3.411)
mpg <- c(17,15,30)
mileRange <- seq(from = 15000, to = 210000, by = 15000)
df <- data.frame(matrix(nrow = length(engineType), ncol = 4 + length(mileRange)))
colnames(df) <- c("Model", "Purchase Price","MPG", "Cost Per Gallon", paste0(as.character(mileRange), " miles"))
df$Model <- engineType
df$`Purchase Price` <- baseCostDollars
df$MPG <- mpg
df$`Cost Per Gallon` <- costPerGallonOfFuel
for(i in seq_along(engineType)){
# for each unique vechile
for(j in seq_along(mileRange)){
# for each step in the miles range
df[i, j+4]<- calCost(initialPrice = baseCostDollars[i], distance = mileRange[j], mpg = mpg[i], fuelPrice = costPerGallonOfFuel[i])
}
}
DT::datatable(df)
# Create a first line
plot(df$[1, 5:ncol(df)], names(df[5:ncol(df)]), type = "b", frame = FALSE, pch = 19,
# Create a first line
plot(df[1, 5:ncol(df)], names(df[5:ncol(df)]), type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
df[1, 5:ncol(df)]
df[,5:ncol(df)][1]
df[,5:ncol(df)][1,]
as.vector(df[1,5:ncol(df)])
# Create a first line
plot(as.vector(df[1,5:ncol(df)]), names(df[5:ncol(df)]), type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
# Create a first line
plot(as.vector(df[1,5:ncol(df)]), names(df[5:ncol(df)]), type = "l", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
# Create a first line
plot(as.vector(df[1,5:ncol(df)]), names(df[5:ncol(df)]))
names(df[5:ncol(df)])
for(i in seq_along(engineType)){
# for each unique vechile
for(j in seq_along(mileRange)){
# for each step in the miles range
df[i, j+4]<- calCost(initialPrice = baseCostDollars[i], distance = mileRange[j], mpg = mpg[i], fuelPrice = costPerGallonOfFuel[i])
}
}
df
r1 <- raster()
library(raster)
r1 <- raster()
r1
extent(r1) <- extent(usa)
#location data
d1 <- read.csv("data/cellsID.csv")
names(d1)<- c("lat","lon","ID.CELL","ID.BIOME")
usa <- d1 %>%
dplyr::filter(lat > 0)%>%
sf::st_as_sf(coords = c("lon","lat"))%>%
sf::st_set_crs(4326)
extent(r1) <- extent(usa)
library(dplyr)
library(sf)
library(terra)
library(tmap)
library(raster)
r1 <- raster()
extent(r1) <- extent(usa)
#location data
d1 <- read.csv("data/cellsID.csv")
names(d1)<- c("lat","lon","ID.CELL","ID.BIOME")
usa <- d1 %>%
dplyr::filter(lat > 0)%>%
sf::st_as_sf(coords = c("lon","lat"))%>%
sf::st_set_crs(4326)
extent(r1) <- extent(usa)
r1
res(r1) <- 0.5
r1
library(dplyr)
ow <- read.csv("data/projectList.csv")
stateW <- read.csv("data/stateWells.csv")
names(ow)
View(ow)
View(stateW)
dim(ow)
dim(stateW)
library(sf)
library(tigris)
?counties
# attach county data to well locations ------------------------------------
county <- tigris::counties(state = "CO")
?st_as_sf
names(stateW)
# generate spatail data from well sites
w2 <- sf::st_as_sf(stateW, coords = c("Longitude", "Latitude"), 4326)
# generate spatail data from well sites
w2 <- sf::st_as_sf(stateW, coords = c("Longitude", "Latitude"),wkt = 4326)
# generate spatail data from well sites
w2 <- sf::st_as_sf(stateW, coords = c("Longitude", "Latitude"))
names(county)
c1 <- county %>%
dplyr::select("NAME")
library(tmap)
tmap::tmap_mode("view")
qtm(w2)
w2$county <- sf::st_intersection(w2,county)
crs(w2)
w2
# generate spatail data from well sites
w2 <- sf::st_as_sf(stateW, coords = c("Longitude", "Latitude"))%>%
sf::st_transform(crs = c1)
# generate spatail data from well sites
w2 <- sf::st_as_sf(stateW, coords = c("Longitude", "Latitude"))%>%
sf::st_transform(crs = sf::st_crs(c1))
# generate spatail data from well sites
w2 <- sf::st_as_sf(stateW, coords = c("Longitude", "Latitude"))%>%
sf::st_set_crs(value = 4326)%>%
sf::st_transform(crs = sf::st_crs(c1))
w2$county <- sf::st_intersection(w2,county)
View(w2)
# generate spatail data from well sites
w2 <- sf::st_as_sf(stateW, coords = c("Longitude", "Latitude"))%>%
sf::st_set_crs(value = 4326)%>%
sf::st_transform(crs = sf::st_crs(c1))
w2$county <- sf::st_intersection(w2,c1)
View(w2)
names(c1)
# generate spatail data from well sites
w2 <- sf::st_as_sf(stateW, coords = c("Longitude", "Latitude"))%>%
sf::st_set_crs(value = 4326)%>%
sf::st_transform(crs = sf::st_crs(c1))
names(w2)
w2$county <- sf::st_intersection(w2,c1)
names(w2)
head(w2)
names(w2
)
w2[1,
]
names(w2
)
# generate spatail data from well sites
w2 <- sf::st_as_sf(stateW, coords = c("Longitude", "Latitude"))%>%
sf::st_set_crs(value = 4326)%>%
sf::st_transform(crs = sf::st_crs(c1))%>%
dplyr::select(-description)
names(w2)
w2$county <- sf::st_intersection(w2,c1)
w2[1,]
View(w2)
w23 <- sf::st_intersection(w2,c1)
View(w23)
# generate spatail data from well sites
w2 <- sf::st_as_sf(stateW, coords = c("Longitude", "Latitude"))%>%
sf::st_set_crs(value = 4326)%>%
sf::st_transform(crs = sf::st_crs(c1))%>%
dplyr::select(-description)
w23 <- sf::st_intersection(w2,c1)
w2 <- sf::st_intersection(w2,c1)
# function to testing connections -----------------------------------------
test <- w2[1, ]
# filter on county
d1 <- ow[grepl(pattern = test$NAME, x = ow$County,ignore.case = TRUE),]
dim(d1)
View(d1)
test
names(d1)
# filter on project name
d2 <- dplyr::left_join(x = test, y = d1,
by = c("Project_Name"= "Project.Name"))
dim(d2)
i<- 1
matched <- d2
# function to testing connections -----------------------------------------
test <- w2[2, ]
# filter on county
d1 <- ow[grepl(pattern = test$NAME, x = ow$County,ignore.case = TRUE),]
# filter on project name
d2 <- dplyr::left_join(x = test, y = d1,
by = c("Project_Name"= "Project.Name"))
dim(d2)
dim(d1)
View(d1)
test
i <- 2
# filter on project name
d2 <- dplyr::left_join(x = test, y = d1,
by = c("Project_Name"= "Project.Name"))
# condition for exact match
if(nrow(d2)==1){
if(i == 1){
matched <- d2
}else{
matched <- dplyr::bind_rows(matched, d2)
}
}else{
}
matched
# function to testing connections -----------------------------------------
test <- w2[3, ]
# filter on county
d1 <- ow[grepl(pattern = test$NAME, x = ow$County,ignore.case = TRUE),]
# filter on project name
d2 <- dplyr::left_join(x = test, y = d1,
by = c("Project_Name"= "Project.Name"))
dim(d2)
# condition for exact match
if(nrow(d2)==1){
if(i == 1){
matched <- d2
}else{
matched <- dplyr::bind_rows(matched, d2)
}
}else{
}
# function to testing connections -----------------------------------------
test <- w2[4, ]
# filter on county
d1 <- ow[grepl(pattern = test$NAME, x = ow$County,ignore.case = TRUE),]
# filter on project name
d2 <- dplyr::left_join(x = test, y = d1,
by = c("Project_Name"= "Project.Name"))
# condition for exact match
if(nrow(d2)==1){
if(i == 1){
matched <- d2
}else{
matched <- dplyr::bind_rows(matched, d2)
}
}else{
}
d2
# function to testing connections -----------------------------------------
for(i in seq_along(w2$Name)){
test <- w2[i, ]
# filter on county
d1 <- ow[grepl(pattern = test$NAME, x = ow$County,ignore.case = TRUE),]
# filter on project name
d2 <- dplyr::left_join(x = test, y = d1,
by = c("Project_Name"= "Project.Name"))
# condition for exact match
if(nrow(d2)==1){
if(i == 1){
matched <- d2
}else{
matched <- dplyr::bind_rows(matched, d2)
}
}else{
print(i)
}
}
dim(w2)
dim(matched)
View(matched)
?st_as_sf
## fed data
fedW <- read.csv("data/federalWells.csv")
##comibne all wells
allWells <- bind_rows(stateW, fedW)
dim(allWells)
dim(fedW)
dim(stateW)
# generate spatail data from well sites
w2 <- sf::st_as_sf(allWells, coords = c("Longitude", "Latitude"),remove=FALSE)%>%
sf::st_set_crs(value = 4326)%>%
sf::st_transform(crs = sf::st_crs(c1))%>%
dplyr::select(-description)
sf::st_crs(c1)
dim(ow)
dim(allWells)
# generate spatail data from well sites
w2 <- sf::st_as_sf(allWells, coords = c("Longitude", "Latitude"),remove=FALSE)%>%
sf::st_set_crs(value = 4326)%>%
sf::st_transform(crs = sf::st_crs(c1))%>%
dplyr::select(-description)
w2 <- sf::st_intersection(w2,c1)
# function to testing connections -----------------------------------------
for(i in seq_along(w2$Name)){
test <- w2[i, ]
# filter on county
d1 <- ow[grepl(pattern = test$NAME, x = ow$County,ignore.case = TRUE),]
# filter on project name
d2 <- dplyr::left_join(x = test, y = d1,
by = c("Project_Name"= "Project.Name"))
# condition for exact match
if(nrow(d2)==1){
if(i == 1){
matched <- d2
}else{
matched <- dplyr::bind_rows(matched, d2)
}
}else{
print(i)
}
}
View(matched)
class(matched)
write.csv(x = matched%>%st_drop_geometry(),
file = "data/outputs/matchedWells/orphanedWells_LatLon.csv")
write.csv(x = matched%>%st_drop_geometry(),
file = "outputs/matchedWells/orphanedWells_LatLon.csv")
?write_sf
st_write(obj = matched, )
st_write(obj = matched,"outputs/matchedWells/orphanedWells.shp")
dim(matched)
library(sf)
library(dplyr)
d1 <- read.csv("data/cellsID.csv")
haed(d1)
head(d1)
library(readr)
d1 <- read_csv("data/cellsID.csv")%>%
st_as_sf(coords = c(""))
d1 <- read_csv("data/cellsID.csv")
names(d1)
d1 <- read_csv("data/cellsID.csv")%>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"))
class(d1)
bbox <- sf::st_bbox(d1)
bbox
head(d1)
View(d1)
?st_as_sf
d1 <- read_csv("data/cellsID.csv")%>%
st_as_sf(coords = c("LONGITUDE", "LATITUDE"),remove =FALSE)
head(d1)
us <- d1 %>%
dplyr::filter(LATITUDE > 0)
bbox <- sf::st_bbox(us)
bbox
