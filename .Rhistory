gridArea
seq_along(gridArea$Id)
i <- 1
# select feature
t1 <- gridArea[i]
t1
# assgin Id
df$Id[i] <- t1$Id
# crop and mask image
r2 <- landcover %>% terra::crop(t1)%>%terra::mask(t1)
# determine values
vals <- values(r2)
vals
uniqueVals <- sort(unique(vals))
uniqueVals
total <- length(vals)
j <- 1
code <- as.numeric(values[j])
code
code %in% uniqueVals
for(j in seq_along(values)){
code <- as.numeric(values[j])
if(code %in% uniqueVals){
index <- code
val2 <- vals[vals == index, ]
sum1 <- length(val2)
percentCover <- (sum1/total)*100
df[i,as.character(index)] <- percentCover
}
}
head(df)
total
val2
index
head(df)
j <- 2
index <- code
val2 <- vals[vals == index, ]
val2
index
code <- as.numeric(values[j])
code
index <- code
val2 <- vals[vals == index, ]
val2
vals
index
vals[vals == 3, ]
vals[vals == 3]
# Nan features causing some issues
vals[is.nan(vals)] <- 9999
vals
val2 <- vals[vals == index, ]
val2
vals[is.na(vals)] <- 9991
uniqueVals <- sort(unique(vals))
unique(vals)
# determine values
vals <- values(r2)
uniqueVals <- sort(unique(vals))
# Nan features causing some issues
vals[is.nan(vals)] <- 9999
vals[is.na(vals)] <- 9991
total <- length(vals)
total
code <- as.numeric(values[j])
index <- code
val2 <- vals[vals == index, ]
unique(val2)
sum1 <- length(val2)
sum1
percentCover <- (sum1/total)*100
percentCover
# determine values
vals <- values(r2)
uniqueVals <- sort(unique(vals))
# Nan features causing some issues
vals[is.nan(vals)] <- 9999
vals[is.na(vals)] <- 9991
total <- length(vals)
for(j in seq_along(values)){
code <- as.numeric(values[j])
if(code %in% uniqueVals){
index <- code
val2 <- vals[vals == index, ]
sum1 <- length(val2)
percentCover <- (sum1/total)*100
df[i,as.character(index)] <- percentCover
}
}
HEAD(DF)
head(df)
for(i in seq_along(gridArea$Id)){
# select feature
t1 <- gridArea[i]
# assgin Id
df$Id[i] <- t1$Id
# crop and mask image
r2 <- landcover %>% terra::crop(t1)%>%terra::mask(t1)
# determine values
vals <- values(r2)
uniqueVals <- sort(unique(vals))
# Nan features causing some issues
vals[is.nan(vals)] <- 9999
vals[is.na(vals)] <- 9991
total <- length(vals)
for(j in seq_along(values)){
code <- as.numeric(values[j])
if(code %in% uniqueVals){
index <- code
val2 <- vals[vals == index, ]
sum1 <- length(val2)
percentCover <- (sum1/total)*100
df[i,as.character(index)] <- percentCover
}
}
# counter for progress
if(i %% 10 == 0){
print(paste0(i ," out of ", nrow(df)))
}
}
View(df)
# just looking at the plot legend for list of all values
values <- c(1:32,99)
# construct dataframe to hold all records
df <- data.frame(matrix(nrow = nrow(gridArea), ncol = 1+ length(values)))
names(df) <- c("Id", as.character(values))
for(i in seq_along(gridArea$Id)){
# select feature
t1 <- gridArea[i]
# assgin Id
df$Id[i] <- t1$Id
# crop and mask image
r2 <- landcover %>% terra::crop(t1)%>%terra::mask(t1)
# determine values
vals <- values(r2)
uniqueVals <- sort(unique(vals))
# Nan features causing some issues
vals[is.nan(vals)] <- 9999
vals[is.na(vals)] <- 9991
total <- length(vals)
for(j in seq_along(values)){
code <- as.numeric(values[j])
if(code %in% uniqueVals){
index <- code
val2 <- vals[vals == index, ]
sum1 <- length(val2)
percentCover <- (sum1/total)*100
df[i,as.character(index)] <- percentCover
}
}
# counter for progress
if(i %% 10 == 0){
print(paste0(i ," out of ", nrow(df)))
}
}
View(df)
# AUS land cover ----------------------------------------------------------
aus2015LC <- getAUS_LC(landcover = ausLC, gridArea = auGrid)
# install.packages("pacman")
pacman::p_load(dplyr, readr, sf, terra, FedData)
# source scripts ----------------------------------------------------------
for(i in list.files(path = "src/dataProcessing" ,full.names = TRUE)){
source(i)
}
## aus
auGPP <- rast("data/earthEngineOutputs/gppAus.tif")
auGrid <- rast("data/ausGrid/OZgrids.tif")%>%
terra::project(auGPP)%>%
terra::as.polygons()
names(auGrid) <- "Id"
# AUS land cover ----------------------------------------------------------
aus2015LC <- getAUS_LC(landcover = ausLC, gridArea = auGrid)
View(df)
View(aus2015LC)
# AUS land cover ----------------------------------------------------------
ausLC <- getAUS_LC(landcover = ausLC, gridArea = auGrid)
VieW(ausLC)
View(ausLC)
###
# primary workflow for all dataprocessing efforts
# carverd@colostate.edu
# 20211223
###
# install.packages("pacman")
pacman::p_load(dplyr, readr, sf, terra, FedData)
# source scripts ----------------------------------------------------------
for(i in list.files(path = "src/dataProcessing" ,full.names = TRUE)){
source(i)
}
# input datasets ----------------------------------------------------------
## usa
usGPP <- rast("data/earthEngineOutputs/gppUSA.tif")
usGrid <- vect("data/usGrid/US10km_reduced_grids.shp")
usLandCover <- rast("data/usLandCover/nlcd_2019_land_cover_l48_20210604.img") # this local file does not work.
usLandCover <- rast("L:/Projects_active/EnviroScreen/data/NLCD/Land Cover/nlcd_2019_land_cover_l48_20210604.img")
## aus
auGPP <- rast("data/earthEngineOutputs/gppAus.tif")
auGrid <- rast("data/ausGrid/OZgrids.tif")%>%
terra::project(auGPP)%>%
terra::as.polygons()
names(auGrid) <- "Id"
ausLC <- rast("L:/Projects_active/2021_ChevronConant_Oil_and_Gas/Data/ersi/OZ/GRID_NVIS4_1_AUST_MVG_EXT/aust4_1e_mvg/w001000.adf")
View(getAUS_LC)
# AUS land cover ----------------------------------------------------------
ausLC <- getAUS_LC(landcover = ausLC, gridArea = auGrid)
VieW(ausLC)
View(ausLC)
readr::write_csv(ausLC, file= paste0("outputs/ausLC",Sys.Date(),".csv"))
# install.packages("pacman")
pacman::p_load(dplyr, readr, sf, terra, FedData)
# source scripts ----------------------------------------------------------
for(i in list.files(path = "src/dataProcessing" ,full.names = TRUE)){
source(i)
}
# source scripts ----------------------------------------------------------
for(i in list.files(path = "src/dataProcessing" ,full.names = TRUE)){
source(i)
}
## aus
auGPP <- rast("data/earthEngineOutputs/gppAus.tif")
auGrid <- rast("data/ausGrid/OZgrids.tif")%>%
terra::project(auGPP)%>%
terra::as.polygons()
load("D:/cwrNA/parameters/bioLayer_2.5/climate_vx.RDS")
ausLC <- rast("data/ausLandCover/GRID_NVIS6_0_AUST_EXT_MVG/aus6_0e_mvg.ovr")
## aus
auGPP <- rast("data/earthEngineOutputs/gppAus.tif")
auGrid <- rast("data/ausGrid/OZgrids.tif")%>%
terra::project(auGPP)%>%
terra::as.polygons()
# install.packages("pacman")
pacman::p_load(dplyr, readr, sf, terra, FedData)
# source scripts ----------------------------------------------------------
for(i in list.files(path = "src/dataProcessing" ,full.names = TRUE)){
source(i)
}
## aus
auGPP <- rast("data/earthEngineOutputs/gppAus.tif")
auGrid <- rast("data/ausGrid/OZgrids.tif")%>%
terra::project(auGPP)%>%
terra::as.polygons()
names(auGrid) <- "Id"
ausLC <- rast("data/ausLandCover/GRID_NVIS6_0_AUST_EXT_MVG/aus6_0e_mvg.ovr")
library(tmap)
qtm(ausLC)
ausLC
# AUS land cover ----------------------------------------------------------
ausLC <- getAUS_LC(landcover = ausLC, gridArea = auGrid)
landcover <- ausLC
gridArea <- auGrid
gridArea <- gridArea %>%
terra::project(landcover)
gridArea
qtm(gridArea)
class(gridArea)
plot(gridArea)
plot(landcover)
crs(landcover)
ausGrid
ausLC
### geodatabase
au2 <- sf::st_read("data/ausLandCover/GRID_NVIS4_1_AUST_MVG_EXT/FGDB_NVIS4_1_AUST_MVG_EXT/FGDB_NVIS4_1_AUST_MVG_EXT/NVIS4_1_AUST_MVG_EXT.gdb")
### geodatabase
gdb <- "data/ausLandCover/GRID_NVIS4_1_AUST_MVG_EXT/FGDB_NVIS4_1_AUST_MVG_EXT/FGDB_NVIS4_1_AUST_MVG_EXT/NVIS4_1_AUST_MVG_EXT.gdb"
### geodatabase
fgdb <- "data/ausLandCover/GRID_NVIS4_1_AUST_MVG_EXT/FGDB_NVIS4_1_AUST_MVG_EXT/FGDB_NVIS4_1_AUST_MVG_EXT/NVIS4_1_AUST_MVG_EXT.gdb"
# List all feature classes in a file geodatabase
subset(ogrDrivers(), grepl("GDB", name))
fc_list <- ogrListLayers(fgdb)
library(rgdal)
fc_list <- ogrListLayers(fgdb)
fc_list
fgdb2 <- "data/ausLandCover/GRID_NVIS4_1_AUST_MVG_EXT/FGDB_NVIS4_1_KEY_LAYERS_EXT"
# need a feature class to read
au2 <- sf::st_read(fgbd2)
fgdb2 <- "data/ausLandCover/GRID_NVIS4_1_AUST_MVG_EXT/FGDB_NVIS4_1_KEY_LAYERS_EXT"
# need a feature class to read
au2 <- sf::st_read(fgbd2)
# need a feature class to read
au2 <- sf::st_read(fgdb2)
fgdb2 <- "data/ausLandCover/GRID_NVIS4_1_AUST_MVG_EXT/FGDB_NVIS4_1_KEY_LAYERS_EXT/FGDB_NVIS4_1_KEY_LAYERS_EXT/NVIS4_1_KEY_LAYERS_EXT.gdb"
# need a feature class to read
au2 <- sf::st_read(fgdb2)
class(au2)
plot(head(au2))
### geodatabase
fgdb <- "data/ausLandCover/GRID_NVIS4_1_AUST_MVG_EXT/FGDB_NVIS4_1_AUST_MVG_EXT/FGDB_NVIS4_1_AUST_MVG_EXT/NVIS4_1_AUST_MVG_EXT.gdb"
# need a feature class to read
au1 <- sf::st_read(fgdb)
### geodatabase
rasterFeature <- "data/ausLandCover/GRID_NVIS6_0_AUST_EXT_MVG/aus6_0e_mvg.ovr"
# need a feature class to read
au1 <- terra::rast(rasterFeature) # can open because it is a raster... need to use esri as I cant even determine the file name.
au1
ausLC <- rast("data/ausLandCover/GRID_NVIS6_0_AUST_EXT_MVG/aus6_0e.tif")
ausLC <- terra::rast("data/ausLandCover/GRID_NVIS6_0_AUST_EXT_MVG/aus6_0e.tif")
### geodatabase
rasterFeature <- "data/ausLandCover/ausLC.tif"
# need a feature class to read
au1 <- terra::rast(rasterFeature) # can open because it is a raster... need to use esri as I cant even determine the file name.
au1
plot(au1)
# AUS land cover ----------------------------------------------------------
ausLC <- getAUS_LC(landcover = au1, gridArea = auGrid)
###
# primary workflow for all dataprocessing efforts
# carverd@colostate.edu
# 20211223
###
# install.packages("pacman")
pacman::p_load(dplyr, readr, sf, terra, FedData)
# source scripts ----------------------------------------------------------
for(i in list.files(path = "src/dataProcessing" ,full.names = TRUE)){
source(i)
}
# AUS land cover ----------------------------------------------------------
ausLC <- getAUS_LC(landcover = au1, gridArea = auGrid)
## aus
auGPP <- rast("data/earthEngineOutputs/gppAus.tif")
auGrid <- rast("data/ausGrid/OZgrids.tif")%>%
terra::project(auGPP)%>%
terra::as.polygons()
# AUS land cover ----------------------------------------------------------
ausLC <- getAUS_LC(landcover = au1, gridArea = auGrid)
landcover <- au1
gridArea <- auGrid
gridArea <- gridArea %>%
terra::project(landcover)
gridArea
# construct dataframe to hold all records
df <- data.frame(matrix(nrow = nrow(gridArea), ncol = 1+ length(values)))
names(df) <- c("Id", as.character(values))
# just looking at the plot legend for list of all values
values <- c(1:32,99)
names(df) <- c("Id", as.character(values))
# just looking at the plot legend for list of all values
values <- c(1:32,99)
# construct dataframe to hold all records
df <- data.frame(matrix(nrow = nrow(gridArea), ncol = 1+ length(values)))
length(values)
head(df)
names(df) <- c("Id", as.character(values))
head(df)
head(gridArea$Id)
i <1
i <-1
# select feature
t1 <- gridArea[i]
t1
t1$OZgrids
# assgin Id
df$Id[i] <- t1$OZgrids
# crop and mask image
r2 <- landcover %>% terra::crop(t1)%>%terra::mask(t1)
r2
plot(r2)
# determine values
vals <- values(r2)
uniqueVals <- sort(unique(vals))
uniqueVals
# Nan features causing some issues
vals[is.nan(vals)] <- 9999
vals[is.na(vals)] <- 9991
total <- length(vals)
total
for(j in seq_along(values)){
code <- as.numeric(values[j])
if(code %in% uniqueVals){
index <- code
val2 <- vals[vals == index, ]
sum1 <- length(val2)
percentCover <- (sum1/total)*100
df[i,as.character(index)] <- percentCover
}
}
head(df)
## aus
auGPP <- rast("data/earthEngineOutputs/gppAus.tif")
auGrid <- rast("data/ausGrid/OZgrids.tif")%>%
terra::project(auGPP)%>%
terra::as.polygons()
ausLC <- terra::rast("data/ausLandCover/GRID_NVIS6_0_AUST_EXT_MVG/aus6_0e.tif")
### geodatabase
rasterFeature <- "data/ausLandCover/ausLC.tif"
au1 <- terra::rast(rasterFeature) # can open because it is a raster... need to use esri as I cant even determine the file name.
# AUS land cover ----------------------------------------------------------
ausLC <- getAUS_LC(landcover = au1, gridArea = auGrid)
# source scripts ----------------------------------------------------------
for(i in list.files(path = "src/dataProcessing" ,full.names = TRUE)){
source(i)
}
# AUS land cover ----------------------------------------------------------
ausLC <- getAUS_LC(landcover = au1, gridArea = auGrid)
for(j in seq_along(values)){
code <- as.numeric(values[j])
if(code %in% uniqueVals){
index <- code
val2 <- vals[vals == index, ]
sum1 <- length(val2)
percentCover <- (sum1/total)*100
df[i,as.character(index)] <- percentCover
}
}
# install.packages("pacman")
pacman::p_load(dplyr, readr, sf, terra, FedData)
# source scripts ----------------------------------------------------------
for(i in list.files(path = "src/dataProcessing" ,full.names = TRUE)){
source(i)
}
## aus
auGPP <- rast("data/earthEngineOutputs/gppAus.tif")
auGrid <- rast("data/ausGrid/OZgrids.tif")%>%
terra::project(auGPP)%>%
terra::as.polygons()
ausLC <- terra::rast("data/ausLandCover/GRID_NVIS6_0_AUST_EXT_MVG/aus6_0e.tif")
### geodatabase
rasterFeature <- "data/ausLandCover/ausLC.tif"
au1 <- terra::rast(rasterFeature) # can open because it is a raster... need to use esri as I cant even determine the file name.
au1 <- terra::rast("data/ausLandCover/ausLC.tif") # can open because it is a raster... need to use esri as I cant even determine the file name.
# AUS land cover ----------------------------------------------------------
ausLC <- getAUS_LC(landcover = au1, gridArea = auGrid)
gridArea <- gridArea %>%
terra::project(landcover)
# just looking at the plot legend for list of all values
values <- c(1:32,99)
# construct dataframe to hold all records
df <- data.frame(matrix(nrow = nrow(gridArea), ncol = 1+ length(values)))
names(df) <- c("Id", as.character(values))
for(i in seq_along(gridArea$Id)){
# select feature
t1 <- gridArea[i]
# assgin Id
df$Id[i] <- t1$OZgrids
# crop and mask image
r2 <- landcover %>% terra::crop(t1)%>%terra::mask(t1)
# determine values
vals <- values(r2)
uniqueVals <- sort(unique(vals))
# Nan features causing some issues
vals[is.nan(vals)] <- 9999
vals[is.na(vals)] <- 9991
total <- length(vals)
for(j in seq_along(values)){
code <- as.numeric(values[j])
if(code %in% uniqueVals){
index <- code
val2 <- vals[vals == index, ]
sum1 <- length(val2)
percentCover <- (sum1/total)*100
df[i,as.character(index)] <- percentCover
}
}
# counter for progress
if(i %% 10 == 0){
print(paste0(i ," out of ", nrow(df)))
}
}
i
for(i in seq_along(gridArea$Id)){
# select feature
t1 <- gridArea[i]
# assgin Id
df$Id[i] <- t1$OZgrids
# crop and mask image
r2 <- landcover %>% terra::crop(t1)%>%terra::mask(t1)
# determine values
vals <- values(r2)
uniqueVals <- sort(unique(vals))
# Nan features causing some issues
vals[is.nan(vals)] <- 9999
vals[is.na(vals)] <- 9991
total <- length(vals)
for(j in seq_along(values)){
code <- as.numeric(values[j])
if(code %in% uniqueVals){
index <- code
val2 <- vals[vals == index, ]
sum1 <- length(val2)
percentCover <- (sum1/total)*100
df[i,as.character(index)] <- percentCover
}
}
# counter for progress
if(i %% 10 == 0){
print(paste0(i ," out of ", nrow(df)))
}
}
i
# source scripts ----------------------------------------------------------
for(feature in list.files(path = "src/dataProcessing" ,full.names = TRUE)){
source(feature)
}
gridArea <- gridArea %>%
terra::project(landcover)
# just looking at the plot legend for list of all values
values <- c(1:32,99)
# construct dataframe to hold all records
df <- data.frame(matrix(nrow = nrow(gridArea), ncol = 1+ length(values)))
names(df) <- c("Id", as.character(values))
# source scripts ----------------------------------------------------------
for(feature in list.files(path = "src/dataProcessing" ,full.names = TRUE)){
source(feature)
}
# AUS land cover ----------------------------------------------------------
ausLC <- getAUS_LC(landcover = au1, gridArea = auGrid)
readr::write_csv(ausLC, file= paste0("outputs/ausLC_current",Sys.Date(),".csv"))
ausLc_historic <- terra::rast("data/ausLandCover/ausLC_1750.tif")
##historic
auslc2 <- getAUS_LC(landcover = ausLc_historic, gridArea = auGrid)
readr::write_csv(ausLC2, file= paste0("outputs/ausLC_historic",Sys.Date(),".csv"))
readr::write_csv(auslc2 , file= paste0("outputs/ausLC_historic",Sys.Date(),".csv"))
